<<<<<<< HEAD
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- ""
basic_table$is_cuisine2 <- ""
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, is_cuisine1] <- existence
index <- index + 1
}
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, 28] <- existence
index <- index + 1
}
basic_table[index, "is_cuisine1"]
basic_table[index, is_cuisine1]
basic_table[index, "totalTimeInSeconds"]
basic_table[1, "totalTimeInSeconds"]
basic_table[2, "totalTimeInSeconds"]
#return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- ""
basic_table$is_cuisine2 <- ""
index = 1
# This function will return a summary table that including general information about
# # recipes users select
queries <- c("Asian", "American", "Main Dishes")
a <- generate_param(queries)
b <- create_table(a)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
source("create_table.R")
# This function will return a summary table that including general information about
# # recipes users select
queries <- c("Asian", "American", "Main Dishes")
a <- generate_param(queries)
b <- create_table(a)
basic_table <- b
c <- return_summary(basic_table, "Asian", "American")
cuisine1 <- "Asian"
cuisine2 <- "American"
return_description(c,cuisine1,cuisine2)
#return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- ""
basic_table$is_cuisine2 <- ""
index = 1
#return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
basic_table[index, "is_cuisine1"]
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
#basic_table[2, "totalTimeInSeconds"]
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine2)
basic_table[index, "is_cuisine2"] <- existence
index <- index + 1
}
cuisine2_summary <- basic_table %>%
filter(is_cuisine2 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
View(cuisine2_summary)
# Based on the results, create a summary table for both cuisines
cuisine1_summary <- basic_table %>%
filter(is_cuisine1 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
View(cuisine1_summary)
return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
#basic_table[2, "totalTimeInSeconds"]
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine2)
basic_table[index, "is_cuisine2"] <- existence
index <- index + 1
}
# Based on the results, create a summary table for both cuisines
cuisine1_summary <- basic_table %>%
filter(is_cuisine1 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
cuisine2_summary <- basic_table %>%
filter(is_cuisine2 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
#store the results in the vector list and return that list
users_result <- c(cuisine1_summary[1,1], cuisine1_summary[1,2], cuisine1_summary[1,3],
cuisine2_summary[1,1], cuisine2_summary[1,2], cuisine2_summary[1,3])
users_result
}
# This function will return the description for the general tabs
# It will generate description based on the list that including the summartive information used
# This function will take the summary_list (the list that including summarative information),
# cuisine1's name and cuisine2's name as parameters.
return_description <- function(summary_list, cuisine1_name, cuisine2_name) {
# Assign values for variables that description need based on the position of the
# list that including certain summartive information
# The position of each info located in fixed in the summary_list
number_of_results_for_cuisine1 <- summary_list[[1]]
average_cooking_time_for_cuisine1 <- summary_list[[2]]
average_rating_for_cuisine1 <- summary_list[[3]]
number_of_results_for_cuisine2 <- summary_list[[4]]
average_cooking_time_for_cuisine2 <- summary_list[[5]]
average_rating_for_cuisine2 <- summary_list[[6]]
# Checking whether both cuisines exisit
if (number_of_results_for_cuisine1 == 0 || number_of_results_for_cuisine2 == 0) { # if any of cuisines doesn't exisit
if (number_of_results_for_cuisine1 != 0) {
description <- paste0(
"Accoridng to your current selection, we only find lots of recipes for ", cuisine1_name,  "! ",
"The average rating for ", cuisine1_name, " is ", average_rating_for_cuisine1,
" and the average cooking time for ", cuisine1_name, " is ", average_rating_for_cuisine1,
" mins. The following table shows all results that match you choices.
If you want to learn details information about this cuisine,
you can navigate to other tabs in this page."
)
} else {
description <- paste0(
"Accoridng to your current selection, we only find lots of recipes for ", cuisine2_name,  "! ",
"The average rating for ", cuisine2_name, " is ", average_rating_for_cuisine2,
" and the average cooking time for ", cuisine2_name, " is ", average_rating_for_cuisine2,
" mins. The following table shows all results that match you choices.
If you want to learn details information about this cuisine,
you can navigate to other tabs in this page."
)
}
} else { #Which means both cuisines are exisiting
#Finding out the cuisine that required the shortest preparation time
if (average_cooking_time_for_cuisine1 > average_cooking_time_for_cuisine2) {
time_saving_cuisine_name <- cuisine2_name
time_saving_cuisine <- average_cooking_time_for_cuisine2
} else if (average_cooking_time_for_cuisine1 < average_cooking_time_for_cuisine2) {
time_saving_cuisine_name <- cuisine1_name
time_saving_cuisine <- average_cooking_time_for_cuisine1
} else {
time_saving_cuisine_name <- paste0(cuisine1_name, " cuisine or ", cuisine2_name, " cuisine ")
time_saving_cuisine <- paste0(average_cooking_time_for_cuisine1, "or", average_cooking_time_for_cuisine2)
}
#Create the description
description <- paste0(
"Accoridng to your current selection, we find lots of recipes for you!
Among those recipes, there are ", number_of_results_for_cuisine1, " recipes belong to ",
cuisine1_name, " and ", number_of_results_for_cuisine2, " recipes belong to ", cuisine2_name, ".
The average rating for ", cuisine1_name, " is ", average_rating_for_cuisine1, ", and
the average rating for ", cuisine2_name, " is ", average_rating_for_cuisine2, ". If your want
to do or learn quick cooking, you should consider about ", time_saving_cuisine_name, ". Becasue,
the avergae cooking time for ", cuisine1_name, " is ", average_cooking_time_for_cuisine1,
" mins, and the average cooking time for ", cuisine2_name, " is ", average_cooking_time_for_cuisine2,
" mins. The following table shows all results that match you choices.
If you want to learn details information about those cuisine,
you can navigate to other tabs in this page."
)
}
description
}
c <- return_summary(basic_table, "Asian", "American")
c
#return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
#return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
View(basic_table)
basic_table <- b
#return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
View(basic_table)
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
#basic_table[2, "totalTimeInSeconds"]
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine2)
basic_table[index, "is_cuisine2"] <- existence
index <- index + 1
}
# Based on the results, create a summary table for both cuisines
cuisine1_summary <- basic_table %>%
filter(is_cuisine1 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
View(cuisine1_summary)
cuisine2_summary <- basic_table %>%
filter(is_cuisine2 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
View(cuisine2_summary)
#store the results in the vector list and return that list
users_result <- c(cuisine1_summary[1,1], cuisine1_summary[1,2], cuisine1_summary[1,3],
cuisine2_summary[1,1], cuisine2_summary[1,2], cuisine2_summary[1,3])
users_result
cuisine1 <- "Asian"
cuisine2 <- "American"
return_description(c,cuisine1,cuisine2)
b <- create_table(a)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
source("create_table.R")
# This function will return a summary table that including general information about
# # recipes users select
queries <- c("Asian", "American", "Main Dishes")
a <- generate_param(queries)
b <- create_table(a)
basic_table <- b
return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
#basic_table[2, "totalTimeInSeconds"]
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine2)
basic_table[index, "is_cuisine2"] <- existence
index <- index + 1
}
# Based on the results, create a summary table for both cuisines
cuisine1_summary <- basic_table %>%
filter(is_cuisine1 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
cuisine2_summary <- basic_table %>%
filter(is_cuisine2 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
#store the results in the vector list and return that list
users_result <- c(cuisine1_summary[1,1], cuisine1_summary[1,2], cuisine1_summary[1,3],
cuisine2_summary[1,1], cuisine2_summary[1,2], cuisine2_summary[1,3])
users_result
}
c <- return_summary(basic_table, "Asian", "American")
c
cuisine1 <- "Asian"
cuisine2 <- "American"
return_description(c,cuisine1,cuisine2)
# This function will return the description for the general tabs
# It will generate description based on the list that including the summartive information used
# This function will take the summary_list (the list that including summarative information),
# cuisine1's name and cuisine2's name as parameters.
return_description <- function(summary_list, cuisine1_name, cuisine2_name) {
# Assign values for variables that description need based on the position of the
# list that including certain summartive information
# The position of each info located in fixed in the summary_list
number_of_results_for_cuisine1 <- summary_list[[1]]
average_cooking_time_for_cuisine1 <- summary_list[[2]]
average_rating_for_cuisine1 <- summary_list[[3]]
number_of_results_for_cuisine2 <- summary_list[[4]]
average_cooking_time_for_cuisine2 <- summary_list[[5]]
average_rating_for_cuisine2 <- summary_list[[6]]
# Checking whether both cuisines exisit
if (number_of_results_for_cuisine1 == 0 || number_of_results_for_cuisine2 == 0) { # if any of cuisines doesn't exisit
if (number_of_results_for_cuisine1 != 0) {
description <- paste0(
"Accoridng to your current selection, we only find lots of recipes for ", cuisine1_name,  "! ",
"The average rating for ", cuisine1_name, " is ", average_rating_for_cuisine1,
" and the average cooking time for ", cuisine1_name, " is ", average_rating_for_cuisine1,
" mins. The following table shows all results that match you choices.
If you want to learn details information about this cuisine,
you can navigate to other tabs in this page."
)
} else {
description <- paste0(
"Accoridng to your current selection, we only find lots of recipes for ", cuisine2_name,  "! ",
"The average rating for ", cuisine2_name, " is ", average_rating_for_cuisine2,
" and the average cooking time for ", cuisine2_name, " is ", average_rating_for_cuisine2,
" mins. The following table shows all results that match you choices.
If you want to learn details information about this cuisine,
you can navigate to other tabs in this page."
)
}
} else { #Which means both cuisines are exisiting
#Finding out the cuisine that required the shortest preparation time
if (average_cooking_time_for_cuisine1 > average_cooking_time_for_cuisine2) {
time_saving_cuisine_name <- cuisine2_name
time_saving_cuisine <- average_cooking_time_for_cuisine2
} else if (average_cooking_time_for_cuisine1 < average_cooking_time_for_cuisine2) {
time_saving_cuisine_name <- cuisine1_name
time_saving_cuisine <- average_cooking_time_for_cuisine1
} else {
time_saving_cuisine_name <- paste0(cuisine1_name, " cuisine or ", cuisine2_name, " cuisine ")
time_saving_cuisine <- paste0(average_cooking_time_for_cuisine1, "or", average_cooking_time_for_cuisine2)
}
#Create the description
description <- paste0(
"Accoridng to your current selection, we find lots of recipes for you!
Among those recipes, there are ", number_of_results_for_cuisine1, " recipes belong to ",
cuisine1_name, " and ", number_of_results_for_cuisine2, " recipes belong to ", cuisine2_name, ".
The average rating for ", cuisine1_name, " is ", average_rating_for_cuisine1, ", and
the average rating for ", cuisine2_name, " is ", average_rating_for_cuisine2, ". If your want
to do or learn quick cooking, you should consider about ", time_saving_cuisine_name, ". Becasue,
the avergae cooking time for ", cuisine1_name, " is ", average_cooking_time_for_cuisine1,
" mins, and the average cooking time for ", cuisine2_name, " is ", average_cooking_time_for_cuisine2,
" mins. The following table shows all results that match you choices.
If you want to learn details information about those cuisine,
you can navigate to other tabs in this page."
)
}
description
}
return_summary <- function(basic_table, cuisine1, cuisine2) {
# Becasue some cuisine attributes returned the vector list,
# so the first step is checking the cuisine type of the recipe.
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine1)
basic_table[index, "is_cuisine1"] <- existence
index <- index + 1
}
#basic_table[2, "totalTimeInSeconds"]
index = 1
for (cuisine_type in basic_table[,10]) {
existence <- any(cuisine_type == cuisine2)
basic_table[index, "is_cuisine2"] <- existence
index <- index + 1
}
# Based on the results, create a summary table for both cuisines
cuisine1_summary <- basic_table %>%
filter(is_cuisine1 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
cuisine2_summary <- basic_table %>%
filter(is_cuisine2 == TRUE) %>%
summarise(
number_of_result = n(),
average_time = round(mean(totalTimeInSeconds, na.rm=TRUE) * 10 / 60) / 10,
average_rating = round(mean(rating, na.rm=TRUE) * 10) / 10
)
#store the results in the vector list and return that list
users_result <- c(cuisine1_summary[1,1], cuisine1_summary[1,2], cuisine1_summary[1,3],
cuisine2_summary[1,1], cuisine2_summary[1,2], cuisine2_summary[1,3])
users_result
}
return_description(c,cuisine1,cuisine2)
c <- return_summary(basic_table, "Asian", "American")
c
cuisine1 <- "Asian"
cuisine2 <- "American"
return_description(c,cuisine1,cuisine2)
c <- return_summary(basic_table, "Asian", "American")
c
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
source("create_table.R")
queries <- c("American", "French", "Main Dishes", "390^Pescetarian", "397^Egg-Free")
a <- generate_param(queries)
b <- create_table(query_params)
b <- create_table(a)
basic_table <- b
basic_table$is_cuisine1 <- "1"
basic_table$is_cuisine2 <- "2"
View(basic_table)
cuisine1 <- "American"
basic_table$is_cuisine1 <- any(basic_table[,"attributes.cuisine"] == cuisine1)
cuisine1 <- "American"
basic_table$is_cuisine1 <- any(basic_table[,"attributes.cuisine"] == cuisine1)
any(basic_table[,"attributes.cuisine"] == cuisine1)
any(basic_table[ 1 ,"attributes.cuisine"] == cuisine1)
any(basic_table[ 2 ,"attributes.cuisine"] == cuisine1)
cuisine1 <- "American"
basic_table$cuisine1 <- cuisine1
any(basic_table$attributes.cuisine == basic_table$cuisine1)
any(basic_table$attributes.cuisine == basic_table$cuisine1)
basic_table$is_cuisine1 <- (basic_table$attributes.cuisine == basic_table$cuisine1)
basic_table[l ,"attributes.cuisine"]
l <- c(1:50)
basic_table[l ,"attributes.cuisine"]
l <- c(1:10)
basic_table[l ,"attributes.cuisine"]
basic_table[l ,"attributes.cuisine"] == basic_table[l ,cuisine1]
basic_table[l ,"attributes.cuisine"] == basic_table[l ,"cuisine1"]
any(basic_table[l ,"attributes.cuisine"] == basic_table[l ,"cuisine1"])
is.element('American', basic_table[l ,"attributes.cuisine"])
test <- lapply(basic_table$attributes.cuisine, k)
k <- function(cuisine_type, right_type) {
is.element('American', basic_table$attributes.cuisine)
}
test <- lapply(basic_table$attributes.cuisine, k)
View(test)
test <- lapply(basic_table$attributes.cuisine, k, input[[1]])
View(test)
lapply(basic_table$attributes.cuisine, k, input[[1]])
lapply(basic_table$attributes.cuisine, k, input[[2]])
k <- function(cuisine_type, right_type) {
is.element(right_type, cuisine_type)
}
lapply(basic_table$attributes.cuisine, k, input[[2]])
lapply(basic_table$attributes.cuisine, k, input[[1]])
k <- function (right_type, list) {
is.element(right_type, list)
index <- index + 1
}
lapply(basic_table[,"attributes.cuisine"], k(basic_table[,"attributes.cuisine"], "American") )
index <- 1
lapply(basic_table[,"attributes.cuisine"], k(basic_table[,"attributes.cuisine"], "American") )
lapply(basic_table[,"attributes.cuisine"], k(basic_table$attributes.cuisine, "American") )
k <- function (right_type, list) {
is.element(right_type, list)
index <- index + 1
}
index <- 1
lapply(basic_table[,"attributes.cuisine"], k(basic_table$attributes.cuisine, "American") )
lapply(basic_table[,"attributes.cuisine"], k )
lapply(basic_table[,"attributes.cuisine"], function(right_type, list) {
is.element(right_type, list)
index <- index + 1
})
lapply(basic_table[,"attributes.cuisine"], function("American", basic_table[,"attributes.cuisine"]) {
is.element(right_type, list)
index <- index + 1
})
lapply(basic_table[,"attributes.cuisine"], k("American", basic_table[,"attributes.cuisine"]))
is.function(k)
runApp('app2.R')
runApp('app2.R')
=======
View(vehicles)
is.data.frame(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- vehicles[, c("makes")]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- vehicles[, c("makes"), ]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- vehicles[, c("makes") ,]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
print(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(make))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == "1997", ]
print(cars_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy),]
print(cars_1997)
cars_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
view(cars_1997)
View(cars_1997)
vehicles[vehicles$drive == "2-Wheel Drive"]
vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_2_wheel_drive <- vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_2_wheel_drive[vehicles$cty > 20]
vehicles_2_wheel_drive[vehicles$cty > 20, ]
install.packages("httr")
library("httr")
base_uri <- "https://api.github.com"
username <- "info201"
# The complete URI
uri <- paste0(base_uri, resource)
# The specific endpoint
resource <- paste0("/users/", username, "/repos")
# The complete URI
uri <- paste0(base_uri, resource)
# The specific endpoint
#resource <- paste0("/users/", username, "/repos")
resource <- "/emojis"
uri
GET(uri)
response <- GET(uri)
#2
body <- content(response, "text")
body
length(body)
is.vector(body)
# Install `jsonlite` package
# Only needs to be done once per machine!
install.packages("jsonlite")
# Load the package (tell R functions are available for use)
library("jsonlite")
# an example string of JSON
json <- '{"first_name":"Ada","job":"Programmer","pets":["rover","fl
# convert from string into R structure
ada <- fromJSON(json) # a list!
response <- GET("https://api.github.com/users/info201/repos")
body <- content(response, "text")
repos <- fromJSON(body) # a data frame!
25
ada <- fromJSON(json)
emojis <- fromJSON(body)
emojis
body_data <- fromJSON(content(response, "text"))
is.data.frame(body_data)
body_data <- fromJSON(content(response, "text"))
is.data.frame(body_data)
str(body_data)
names(body_data)
people<- data.frame(names = c('Spencer', 'Jessica', 'Keagan'))
people<- data.frame(names = c('Spencer', 'Jessica', 'Keagan'))
favorites_df <- data.frame(
food= c('Pizza', 'Pasta', 'salad'),
music = c('Bluegrass', 'Indie', 'Electronic')
)
people$favorites <- favorites_df
print(people)
people$favorites.food
people$favories$food
people$favorites$food
flat <- flatten(people)
flat <- flatten(people)
people <- flatten(people)
library("jsonlite")
people <- flatten(people)
people
View(people)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
api_key <- "54631729b4a04ae0bc2e16275fef2f6e"
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
api_key <- "O5AYHeaSQTn9asQBO6W0lTXWyEXKpr0jgwjKzcHI"
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
View(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
View(recent_mh_bills)
kable(recent_mh_bills)
letters <- c("a", "b", "c")
numbers <- 1:3
df <- data.frame(letters = letters, numbers = numbers)
kable(df)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
View(recent_mh_bills)
legislators_involved <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legistors"] = legislators
View(recent_mh_bills)
source("Assignment.R")
recent_mh_bills["legistors"] = legislators
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legistors"] = legislators
View(recent_mh_bills)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legistors"] = legislators
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legistlators,
latest_major_action,
more_information
)
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legistlators_involved,
latest_major_action,
more_information
)
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legistlators,
latest_major_action,
more_information
)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legislators"] = legislators
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legistlators,
latest_major_action,
more_information
)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legislators"] = legislators
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legislators,
latest_major_action,
more_information
)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legislators"] = legislators
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legislators_involved,
latest_major_action,
more_information
)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legislators"] = legislators
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legislators,
latest_major_action,
more_information
)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legislators"] = legislators
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legislators_involved,
latest_major_action,
more_information
)
source("api-key.R")
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
#Part 1: Legislative Data
topic <- "mental-health"
base_uri <- "https://api.propublica.org/congress/v1/"
response <- GET(base_uri, add_headers('X-API-KEY' = api_key))
response <- GET(paste0(base_uri, "bills/search.json?", "query=", topic),
add_headers('X-API-KEY' = api_key))
mh_body <- content(response, "text")
parsed_mh_data <- fromJSON(mh_body)
recent_mh_bills <- data.frame(parsed_mh_data$results, stringsAsFactors = FALSE)
recent_mh_bills <- flatten(recent_mh_bills)
recent_mh_bills <- data.frame(recent_mh_bills$bills)
legislators <- paste0(
recent_mh_bills$sponsor_name,
",",
recent_mh_bills$sponsor_state,
",",
recent_mh_bills$sponsor_party
)
recent_mh_bills["legislators_involved"] = legislators_involved
more_information <- paste0(
recent_mh_bills$congressdotgov_url,
",",
recent_mh_bills$govtrack_url
)
recent_mh_bills["more information"] = more_information
top_10_mh_bills <- arrange(recent_mh_bills, desc(introduced_date))
top_10_mh_bills <- recent_mh_bills[1:10, ]
top_10_mh_bills <- select(
top_10_mh_bills,
bill_id,
short_title,
legislators_involved,
latest_major_action,
more_information
)
install.packages("shiny")
library("shiny")
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput('user_name', label = "What is your name?")
)
runApp('shiny-demo-info 201')
runApp('shiny-demo-info 201')
runApp('shiny-demo-info 201')
>>>>>>> c68803251128d2f2a678831886fe17062492c8d9
